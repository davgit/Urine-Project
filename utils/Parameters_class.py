from __future__ import division
import numpy as np

class Parameters_values():
    def __init__(self):
        self.catridge_diameter = 100 #mm
        self.PVC_lifetime = 50 #years
        self.resin_density = 750 #g/L
        self.resin_cost_kg = 32 #$/kg #### CHECK with Will
        self.resin_energy_MJ_kg = 30 #MJ/kg ion exchange resin WEST
        self.resin_GHG_kg_kg= 1 #kg/kg ion exchange resin WEST
        self.resin_transport = 3862 #km WEST
        self.hydraulic_conductivity = 0.00253 #m/s
        self.resin_lifetime = 5 #years ### CHECK with Will
        self.N_urine = 7.5 #gN/L
        self.adsorption_density = 4.9 #mmolN/g resin
        self.molar_mass_N = 14 #g/mol
        self.time_between_catridge_regeneration = 7 #days
        self.time_for_regeneration = 1.5 #h/day
        self.urine_production = 1 #L/person-day
        self.household_size = 4 #people
        self.flow_equalization_retention_time = 1  #day
        self.tank_height = 0.5 #m
        self.tank_thickness = 0.002 #m
        self.steel_GHG = 1.3 #kgCO2/kg
        self.steel_energy = 17.5 #MJ/kg
        self.steel_sheet_mass = 186.9 #kg
        self.steel_sheet_area = 3.72 #m2
        self.steel_lifetime = 50 #years
        self.transport_energy_MJ_km=13 #MJ/km
        self.transport_GHG_kg_km= 1 #kgCo2/km
        self.diesel_cost = 2.2 #$/gal (EIA)
        self.truck_mpg = 10 
        self.transport_cost_km = self.diesel_cost/(self.truck_mpg*1.6) # $/km
        self.km = 60 #km
        self.truck_manuf_energy = 0.89 #MJ/$
        self.truck_manuf_GHG = 0.06 #kgCO2/$
        self.truck_milage = 1500000
        self.truck_cost = 70000 # $
        self.truck_milage_y = 20000 #miles/y
        self.truck_manufacturing_energy = self.truck_manuf_energy*self.truck_cost/(self.truck_milage/self.truck_milage_y) #MJ/y
        self.truck_manufacturing_GHG = self.truck_manuf_GHG*self.truck_cost/(self.truck_milage/self.truck_milage_y) #kg/y
        self.truck_cost_y = self.truck_cost/(self.truck_milage/self.truck_milage_y) #$/y
        self.plastic_energy = 14.8 #MJ/$  EIOLCA plastics manufacturing
        self.plastic_GHG = 0.904 #kg/$ EIOLCA plastics manufacturing
        self.plastic_cost = 300  #$/m3 alibaba
        self.plastic_density = 20 #kg/m3
        self.plastic_lifetime = 50 #years
        self.plastic_energy_MJ_kg = self.plastic_energy*self.plastic_cost/self.plastic_density
        self.plastic_GHG_kg_kg = self.plastic_GHG*self.plastic_cost/self.plastic_density
        self.plastic_cost_kg = self.plastic_cost/self.plastic_density
        self.motor_efficiency = 0.95 
        self.electricity_EF = 0.083 #kgCO2/kWh
        self.electricity_cost = 0.1 # $/kWh
        self.specific_weight = 1 #kN/m3
        self.pump_lifetime = 10
        self.sulphuric_acid_energy = 1.7 #MJ/kg Ecoinvent
        self.sulphuric_acid_GHG = 0.12 #kg/kg Ecoinvent
        self.acid_density = 1840 #g/L
        #acid_per_resin = 0.01#kg/kg ### CHECK
        self.acid_per_resin_L = 0.017  #L/L 
        self.acid_per_resin = self.acid_per_resin_L*self.acid_density/(self.resin_density)
        self.sulphuric_acid_cost = 0.138 #$/kg ### CHECK
        #sulphuric_acid_cost = 0.013 #$/kg 
        self.acid_flow_rate = 360 # ml/min
        self.acid_flow_rate_m3_s = self.acid_flow_rate/(60*1000*1000) #m3/s
        self.acid_transport = 193 #km WEST
        self.volume_fertilizer_per_acid = 0.5 #L/L #CHECK
        self.volume_bottle = 1 #L
        self.bottle_height = 0.3
        self.bottle_thickness = 0.01 #m
        self.bottle_lifetime = 2 #y
        self.collection_times_per_year = 12
        self.facility_manufacturing_energy = 0 #MJ
        self.facility_manufacturing_GHG = 0 #kg
        self.facility_lifetime = 10 # y
        self.min_facility_cost = 100000

    def uncertainty(self):
        self.catridge_diameter = np.random.uniform(0.8*self.catridge_diameter,1.2*self.catridge_diameter)
        self.PVC_lifetime = np.random.uniform(0.8*self.PVC_lifetime,1.2*self.PVC_lifetime)
        self.resin_density = np.random.uniform(0.8*self.resin_density,1.2*self.resin_density)
        self.resin_cost_kg = np.random.uniform(0.8*self.resin_cost_kg,1.2*self.resin_cost_kg)
        self.resin_energy_MJ_kg = np.random.uniform(0.8*self.resin_energy_MJ_kg,1.2*self.resin_energy_MJ_kg)
        self.resin_GHG_kg_kg = np.random.uniform(0.8*self.resin_GHG_kg_kg,1.2*self.resin_GHG_kg_kg)
        self.resin_transport = np.random.uniform(0.8*self.resin_transport,1.2*self.resin_transport)
        self.hydraulic_conductivity = np.random.uniform(0.8*self.hydraulic_conductivity,1.2*self.hydraulic_conductivity)
        self.resin_lifetime = np.random.uniform(0.8*self.resin_lifetime,1.2*self.resin_lifetime)
        self.N_urine = np.random.uniform(0.8*self.N_urine,1.2*self.N_urine)
        self.adsorption_density = np.random.uniform(0.8*self.adsorption_density,1.2*self.adsorption_density)
        self.molar_mass_N = np.random.uniform(0.8*self.molar_mass_N,1.2*self.molar_mass_N)
        self.time_between_catridge_regeneration = np.random.uniform(0.8*self.time_between_catridge_regeneration,1.2*self.time_between_catridge_regeneration)
        self.time_for_regeneration = np.random.uniform(0.8*self.time_for_regeneration,1.2*self.time_for_regeneration)
        self.urine_production = np.random.uniform(0.8*self.urine_production,1.2*self.urine_production)
        self.household_size = np.random.uniform(0.8*self.household_size,1.2*self.household_size)
        self.flow_equalization_retention_time = np.random.uniform(0.8*self.flow_equalization_retention_time,1.2*self.flow_equalization_retention_time)
        self.tank_height = np.random.uniform(0.8*self.tank_height,1.2*self.tank_height)
        self.tank_thickness = np.random.uniform(0.8*self.tank_thickness,1.2*self.tank_thickness)
        self.steel_GHG = np.random.uniform(0.8*self.steel_GHG,1.2*self.steel_GHG)
        self.steel_energy = np.random.uniform(0.8*self.steel_energy,1.2*self.steel_energy)
        self.steel_sheet_mass = np.random.uniform(0.8*self.steel_sheet_mass,1.2*self.steel_sheet_mass)
        self.steel_sheet_area = np.random.uniform(0.8*self.steel_sheet_area,1.2*self.steel_sheet_area)
        self.steel_lifetime = np.random.uniform(0.8*self.steel_lifetime,1.2*self.steel_lifetime)
        self.transport_energy_MJ_km = np.random.uniform(0.8*self.transport_energy_MJ_km,1.2*self.transport_energy_MJ_km)
        self.transport_GHG_kg_km = np.random.uniform(0.8*self.transport_GHG_kg_km,1.2*self.transport_GHG_kg_km)
        self.diesel_cost = np.random.uniform(0.8*self.diesel_cost,1.2*self.diesel_cost)
        self.truck_mpg = np.random.uniform(0.8*self.truck_mpg,1.2*self.truck_mpg)
        self.km = np.random.uniform(0.8*self.km,1.2*self.km)
        self.truck_manuf_energy = np.random.uniform(0.8*self.truck_manuf_energy,1.2*self.truck_manuf_energy)
        self.truck_manuf_GHG = np.random.uniform(0.8*self.truck_manuf_GHG,1.2*self.truck_manuf_GHG)
        self.truck_milage = np.random.uniform(0.8*self.truck_milage,1.2*self.truck_milage)
        self.truck_cost = np.random.uniform(0.8*self.truck_cost,1.2*self.truck_cost)
        self.truck_milage_y = np.random.uniform(0.8*self.truck_milage_y,1.2*self.truck_milage_y)
        self.plastic_energy = np.random.uniform(0.8*self.plastic_energy,1.2*self.plastic_energy)
        self.plastic_GHG = np.random.uniform(0.8*self.plastic_GHG,1.2*self.plastic_GHG)
        self.plastic_cost = np.random.uniform(0.8*self.plastic_cost,1.2*self.plastic_cost)
        self.plastic_density = np.random.uniform(0.8*self.plastic_density,1.2*self.plastic_density)
        self.plastic_lifetime = np.random.uniform(0.8*self.plastic_lifetime,1.2*self.plastic_lifetime)
        self.motor_efficiency = np.random.uniform(0.8*self.motor_efficiency,1.2*self.motor_efficiency) 
        self.electricity_EF = np.random.uniform(0.8*self.electricity_EF,1.2*self.electricity_EF)
        self.electricity_cost = np.random.uniform(0.8*self.electricity_cost,1.2*self.electricity_cost)
        self.specific_weight = np.random.uniform(0.8*self.specific_weight,1.2*self.specific_weight)
        self.pump_lifetime = np.random.uniform(0.8*self.pump_lifetime,1.2*self.pump_lifetime)
        self.sulphuric_acid_energy = np.random.uniform(0.8*self.sulphuric_acid_energy,1.2*self.sulphuric_acid_energy)
        self.sulphuric_acid_GHG = np.random.uniform(0.8*self.sulphuric_acid_GHG,1.2*self.sulphuric_acid_GHG)
        self.acid_density = np.random.uniform(0.8*self.acid_density,1.2*self.acid_density)
        #acid_per_resin = 0.01#kg/kg ### CHECK
        self.acid_per_resin_L = np.random.uniform(0.8*self.acid_per_resin_L,1.2*self.acid_per_resin_L)
        self.sulphuric_acid_cost = np.random.uniform(0.8*self.sulphuric_acid_cost,1.2*self.sulphuric_acid_cost)
        #sulphuric_acid_cost = 0.013 #$/kg 
        self.acid_flow_rate = np.random.uniform(0.8*self.acid_flow_rate,1.2*self.acid_flow_rate)
        self.acid_transport = np.random.uniform(0.8*self.acid_transport,1.2*self.acid_transport)
        self.volume_fertilizer_per_acid = np.random.uniform(0.8*self.volume_fertilizer_per_acid,1.2*self.volume_fertilizer_per_acid)
        self.volume_bottle = np.random.uniform(0.8*self.volume_bottle,1.2*self.volume_bottle)
        self.bottle_height = np.random.uniform(0.8*self.bottle_height,1.2*self.bottle_height)
        self.bottle_thickness = np.random.uniform(0.8*self.bottle_thickness,1.2*self.bottle_thickness)
        self.bottle_lifetime = np.random.uniform(0.8*self.bottle_lifetime,1.2*self.bottle_lifetime)
        self.collection_times_per_year = np.random.uniform(0.8*self.collection_times_per_year,1.2*self.collection_times_per_year)
        self.facility_manufacturing_energy = np.random.uniform(0.8*self.facility_manufacturing_energy,1.2*self.facility_manufacturing_energy)
        self.facility_manufacturing_GHG = np.random.uniform(0.8*self.facility_manufacturing_GHG,1.2*self.facility_manufacturing_GHG)
        self.facility_lifetime = np.random.uniform(0.8*self.facility_lifetime,1.2*self.facility_lifetime)
        self.min_facility_cost = np.random.uniform(0.8*self.min_facility_cost,1.2*self.min_facility_cost)
        return Parameters_values()


